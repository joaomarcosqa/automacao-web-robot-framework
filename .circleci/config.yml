description: >
  Install Google's ChromeDriver WebDriver proxy, for use in browser testing with
  Chrome. A ChromeDriver version will be dynamically selected based on the
  installed version of Chrome; for details, see
  https://sites.google.com/a/chromium.org/chromedriver/downloads/version-selection
  Requirements: sed, curl, unzip
parameters:
  install-dir:
    default: /usr/local/bin
    description: >
      Directory in which to install ChromeDriver (directory selection not
      supported on Alpine Linux)
    type: string
steps:
  - run:
      command: >
        #!/bin/bash

        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

        # determine_chrome_version

        if uname -a | grep Darwin >/dev/null 2>&1; then
          echo "System detected as MacOS"
          CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
          PLATFORM=mac64

        elif grep Alpine /etc/issue >/dev/null 2>&1; then
          apk update >/dev/null 2>&1 &&
            apk add --no-cache chromium-chromedriver >/dev/null

          # verify version
          echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"

          exit 0
        else
          CHROME_VERSION="$(google-chrome --version)"
          PLATFORM=linux64
        fi


        CHROME_VERSION_STRING="$(echo "$CHROME_VERSION" | sed 's/.*Google Chrome
        //' | sed 's/.*Chromium //')"


        # print Chrome version

        echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"


        # determine chromedriver release

        CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"


        CHROME_RELEASE="${CHROMEDRIVER_RELEASE}"


        if [[ $CHROME_RELEASE -lt 70 ]]; then
          # https://sites.google.com/a/chromium.org/chromedriver/downloads
          # https://chromedriver.storage.googleapis.com/2.40/notes.txt

          case $CHROME_RELEASE in
          69)
            CHROMEDRIVER_VERSION="2.44"
            ;;
          68)
            CHROMEDRIVER_VERSION="2.42"
            ;;
          67)
            CHROMEDRIVER_VERSION="2.41"
            ;;
          66)
            CHROMEDRIVER_VERSION="2.40"
            ;;
          65)
            CHROMEDRIVER_VERSION="2.38"
            ;;
          64)
            CHROMEDRIVER_VERSION="2.37"
            ;;
          63)
            CHROMEDRIVER_VERSION="2.36"
            ;;
          62)
            CHROMEDRIVER_VERSION="2.35"
            ;;
          61)
            CHROMEDRIVER_VERSION="2.34"
            ;;
          60)
            CHROMEDRIVER_VERSION="2.33"
            ;;
          59)
            CHROMEDRIVER_VERSION="2.32"
            ;;
          58)
            CHROMEDRIVER_VERSION="2.31"
            ;;
          57)
            CHROMEDRIVER_VERSION="2.29"
            ;;
          56)
            CHROMEDRIVER_VERSION="2.29"
            ;;
          55)
            CHROMEDRIVER_VERSION="2.28"
            ;;
          54)
            CHROMEDRIVER_VERSION="2.27"
            ;;
          53)
            CHROMEDRIVER_VERSION="2.26"
            ;;
          52)
            CHROMEDRIVER_VERSION="2.24"
            ;;
          51)
            CHROMEDRIVER_VERSION="2.23"
            ;;
          50)
            CHROMEDRIVER_VERSION="2.22"
            ;;
          49)
            CHROMEDRIVER_VERSION="2.22"
            ;;
          48)
            CHROMEDRIVER_VERSION="2.21"
            ;;
          47)
            CHROMEDRIVER_VERSION="2.21"
            ;;
          46)
            CHROMEDRIVER_VERSION="2.21"
            ;;
          45)
            CHROMEDRIVER_VERSION="2.20"
            ;;
          44)
            CHROMEDRIVER_VERSION="2.20"
            ;;
          43)
            CHROMEDRIVER_VERSION="2.20"
            ;;
          *)
            echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
            exit 1
            ;;
          esac
        else
          CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
            "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
        fi


        # installation check

        if command -v chromedriver >/dev/null 2>&1; then
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null 2>&1; then
            echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
            exit 0
          else
            echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
            $SUDO rm -f "$(command -v chromedriver)"
          fi
        fi


        echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"


        # download chromedriver

        curl --silent --show-error --location --fail --retry 3 \
          --output chromedriver_$PLATFORM.zip \
          "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

        # setup chromedriver installation

        if command -v yum >/dev/null 2>&1; then
          yum install -y unzip >/dev/null 2>&1
        fi


        unzip "chromedriver_$PLATFORM.zip" >/dev/null 2>&1

        rm -rf "chromedriver_$PLATFORM.zip"


        $SUDO mv chromedriver "$ORB_PARAM_DRIVER_INSTALL_DIR"

        $SUDO chmod +x "$ORB_PARAM_DRIVER_INSTALL_DIR/chromedriver"


        # test/verify version

        if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null
        2>&1; then
          echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"
        else
          echo "Something went wrong; ChromeDriver could not be installed"
          exit 1
        fi
        
      environment:
        ORB_PARAM_DRIVER_INSTALL_DIR: <<parameters.install-dir>>
      name: Install ChromeDriver
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: python run.py -web 

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
